---
format_version: '23'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
app:
  envs:
  - TEST_SHARD_COUNT: 2
  - BITRISE_PROJECT_PATH: Convos.xcodeproj
    opts:
      is_expand: false
  - BITRISE_DISTRIBUTION_METHOD: app-store
    opts:
      is_expand: false
  - POSTHOG_HOST: https://us.i.posthog.com
    opts:
      is_expand: false
  - SENTRY_ORG: ephemerahq
    opts:
      is_expand: false
  - SENTRY_PROJECT: apple-ios
    opts:
      is_expand: false
  - GITHUB_REPOSITORY: ephemeraHQ/convos-ios
    opts:
      is_expand: false
workflows:
  archive_and_export_dev:
    summary: Create a dev build and upload it to App Store Connect for TestFlight
      internal testing
    steps:
    - git-clone@8: {}
    - restore-spm-cache@2: {}
    - bundle::Setup: {}
    - bundle::ReleaseNotes: {}
    - set-xcode-build-number@2:
        title: Set Build Number - Main App
        inputs:
        - verbose: true
        - target: Convos
        - scheme: "$BITRISE_SCHEME"
    - set-xcode-build-number@2:
        title: Set Build Number - NSE
        inputs:
        - verbose: true
        - scheme: "$BITRISE_SCHEME_NSE"
        - target: NotificationService
    - set-xcode-build-number@2:
        title: Set Build Number - AppClip
        inputs:
        - verbose: true
        - target: ConvosAppClip
        - scheme: "$BITRISE_SCHEME_APPCLIP"
    - manage-ios-code-signing@2:
        inputs:
        - distribution_method: app-store
        - verbose_log: 'yes'
        - scheme: "$BITRISE_SCHEME"
        - configuration: "$BITRISE_BUILD_CONFIG"
        title: iOS Code Signing - Main App
    - manage-ios-code-signing@2:
        inputs:
        - distribution_method: app-store
        - scheme: "$BITRISE_SCHEME_NSE"
        - configuration: "$BITRISE_BUILD_CONFIG"
        title: iOS Code Signing - NSE
    - manage-ios-code-signing@2:
        inputs:
        - distribution_method: app-store
        - scheme: "$BITRISE_SCHEME_APPCLIP"
        - configuration: "$BITRISE_BUILD_CONFIG"
        - verbose_log: 'yes'
        title: iOS Code Signing - AppClip
    - xcode-archive@5:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - cache_level: none
        - verbose_log: 'yes'
        - distribution_method: app-store
        - platform: iOS
        - perform_clean_action: 'yes'
        - automatic_code_signing: api-key
        - scheme: "$BITRISE_SCHEME"
        - configuration: "$BITRISE_BUILD_CONFIG"
    - deploy-to-itunesconnect-application-loader@2:
        inputs:
        - bundle_id: org.convos.ios-preview
        - app_id: '6748622252'
    - save-spm-cache@1: {}
    meta:
      bitrise.io:
        stack: osx-xcode-26.0.x
    envs:
    - BITRISE_SCHEME: Convos (Dev)
      opts:
        is_expand: false
    - BITRISE_SCHEME_NSE: NotificationService (Dev)
      opts:
        is_expand: false
    - BITRISE_SCHEME_APPCLIP: ConvosAppClip
      opts:
        is_expand: false
    - BITRISE_BUILD_CONFIG: Dev
      opts:
        is_expand: false
    triggers:
      tag:
      - name: "*"
  archive_and_export_prod:
    summary: Create a production build and upload it to App Store Connect
    steps:
    - git-clone@8: {}
    - restore-spm-cache@2: {}
    - bundle::Setup: {}
    - bundle::ReleaseNotes: {}
    - set-xcode-build-number@2:
        title: Set Build Number - Main App
        inputs:
        - verbose: true
        - target: Convos
        - scheme: "$BITRISE_SCHEME"
    - set-xcode-build-number@2:
        title: Set Build Number - NSE
        inputs:
        - verbose: true
        - scheme: "$BITRISE_SCHEME_NSE"
        - target: NotificationService
    - set-xcode-build-number@2:
        title: Set Build Number - AppClip
        inputs:
        - verbose: true
        - target: ConvosAppClip
        - scheme: "$BITRISE_SCHEME_APPCLIP"
    - manage-ios-code-signing@2:
        inputs:
        - distribution_method: app-store
        - verbose_log: 'yes'
        - scheme: "$BITRISE_SCHEME"
        - configuration: "$BITRISE_BUILD_CONFIG"
        title: iOS Code Signing - Main App
    - manage-ios-code-signing@2:
        inputs:
        - distribution_method: app-store
        - scheme: "$BITRISE_SCHEME_NSE"
        - configuration: "$BITRISE_BUILD_CONFIG"
        title: iOS Code Signing - NSE
    - manage-ios-code-signing@2:
        inputs:
        - distribution_method: app-store
        - scheme: "$BITRISE_SCHEME_APPCLIP"
        - configuration: "$BITRISE_BUILD_CONFIG"
        - verbose_log: 'yes'
        title: iOS Code Signing - AppClip
    - xcode-archive@5:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - cache_level: none
        - verbose_log: 'yes'
        - distribution_method: app-store
        - platform: iOS
        - perform_clean_action: 'yes'
        - automatic_code_signing: api-key
        - scheme: "$BITRISE_SCHEME"
        - configuration: "$BITRISE_BUILD_CONFIG"
    - deploy-to-itunesconnect-application-loader@2:
        inputs:
        - app_id: '6744776535'
        - bundle_id: org.convos.ios
    - save-spm-cache@1: {}
    meta:
      bitrise.io:
        stack: osx-xcode-26.0.x
    triggers:
      push:
      - branch: main
    envs:
    - BITRISE_SCHEME: Convos (Prod)
      opts:
        is_expand: false
    - BITRISE_SCHEME_NSE: NotificationService (Prod)
      opts:
        is_expand: false
    - BITRISE_SCHEME_APPCLIP: ConvosAppClip
      opts:
        is_expand: false
    - BITRISE_BUILD_CONFIG: Release
      opts:
        is_expand: false
  build_for_testing:
    steps:
    - git-clone@8: {}
    - restore-spm-cache@2.1:
        inputs:
        - retries: '3'
    - bundle::Setup: {}
    - xcode-build-for-test@3:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - scheme: Convos (Dev)
        - destination: generic/platform=iOS Simulator
        - cache_level: none
        - configuration: Debug
    - save-spm-cache@1: {}
    - xcode-test-shard-calculation@0:
        inputs:
        - shard_count: "$TEST_SHARD_COUNT"
        - product_path: "$BITRISE_XCTESTRUN_FILE_PATH"
    meta:
      bitrise.io:
        stack: osx-xcode-26.0.x-edge
    triggers:
      pull_request:
      - source_branch: "*"
      enabled: false
meta:
  bitrise.io:
    stack: osx-xcode-26.0.x-edge
    machine_type_id: g2.mac.medium
step_bundles:
  Setup:
    steps:
    - script@1:
        title: Setup Development Environment (Secure)
        inputs:
        - content: "#!/usr/bin/env bash

            set -e

            set -o pipefail

            # NO set -x to avoid exposing commands in logs


            echo \"ðŸ”§ Setting up development environment for testing\"


            # Public environment variables (available in PRs)

            export POSTHOG_HOST=\"${POSTHOG_HOST:-https://app.posthog.com}\"

            export SENTRY_ORG=\"${SENTRY_ORG:-convos-dev}\"

            export SENTRY_PROJECT=\"${SENTRY_PROJECT:-convos-ios-dev}\"


            # Mocked secrets for testing (not real ones!)

            export POSTHOG_API_KEY=\"ph_test_mock_key_for_ci\"

            export
            SENTRY_UPLOAD_SYMBOLS_AUTH_TOKEN=\"mock_sentry_token_for_testing\"

            export
            SLACK_URL_WITH_KEY=\"https://hooks.slack.com/services/mock/webhook/\
            url\"

            export SENTRY_DSN=\"https://mock@sentry.io/mock\"

            export
            TURNKEY_PUBLIC_ORGANIZATION_ID=\"mock_turnkey_org_for_testing\"

            export
            TURNKEY_API_PUBLIC_KEY=\"mock_turnkey_public_key_for_testing\"

            export
            TURNKEY_API_PRIVATE_KEY=\"mock_turnkey_private_key_for_testing\"


            # Generate secrets using our secure script

            ./Scripts/generate-secrets-secure.sh


            echo \"âœ… Development environment configured securely\""
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            set -o pipefail
            set -x

            TARGET_RUBY_VERSION="3.3.3"

            # Check if Ruby 3.3.3 is already installed
            if rbenv versions | grep -q "$TARGET_RUBY_VERSION"; then
                echo "Ruby $TARGET_RUBY_VERSION is already installed"
                rbenv global "$TARGET_RUBY_VERSION"
            else
                echo "Installing Ruby $TARGET_RUBY_VERSION..."
                rbenv install "$TARGET_RUBY_VERSION"
                rbenv global "$TARGET_RUBY_VERSION"
            fi

            # Verify installation
            echo "Ruby version:"
            ruby --version

            # Update RubyGems and install bundler only if needed
            echo "Checking RubyGems and bundler..."
            gem update --system
            if ! gem list bundler -i > /dev/null 2>&1; then
                echo "Installing bundler..."
                gem install bundler
            else
                echo "Bundler is already installed"
            fi

            echo "Bundler version:"
            bundle --version
        title: Install Ruby 3.3.3
    - script@1:
        title: Setup
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            make setup
            # make secrets

            # or run a script from your repository, like:
            # bash ./path/to/script.sh
            # not just bash, e.g.:
            # ruby ./path/to/script.rb
  ReleaseNotes:
    steps:
    - script@1:
        title: Read Release Notes from GitHub Release
        inputs:
        - content: "./Scripts/read-release-notes.sh"
        is_skippable: true
