name: iOS Build and Deploy

on:
  # Automatic testing on pushes and PRs
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

  # Manual deployment triggers
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
        - 'dev'
        - 'prod'
        default: 'dev'

env:
  RUBY_VERSION: 3.3.3

jobs:
  # Test job - runs automatically on pushes and PRs
  test:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: macos-15
    timeout-minutes: 60

    steps:
      - name: Job Information
        run: |
          echo "Starting test job for PR #${{ github.event.number }}"
          echo "Building iOS app for testing"
          echo "Xcode version: $(xcodebuild -version | head -1)"
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Runner: ${{ runner.name }}"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SPM Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/*/SourcePackages
          key: spm-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-

      - name: Setup Ruby Environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Setup Xcode 26 RC
        run: |
          echo "Configuring Xcode 26 Release Candidate"
          sudo xcode-select -s /Applications/Xcode_26.0.app/Contents/Developer

          # Work around Xcode 26 RC pipe issue
          echo "Checking Xcode version..."
          (xcodebuild -version 2>&1 || true) > /tmp/xcode_version.txt
          if [ -f /tmp/xcode_version.txt ]; then
            echo "Xcode version: $(head -1 /tmp/xcode_version.txt | grep -o 'Xcode [0-9.]*' || echo 'Xcode 26.0')"
            echo "Build version: $(tail -1 /tmp/xcode_version.txt | grep -o 'Build version [A-Za-z0-9]*' || echo 'Build version available')"
          fi

          echo "Checking available SDKs..."
          (xcodebuild -showsdks 2>&1 || true) | grep -E "(iOS|Simulator)" | head -10

          # Check if iOS 26.0 runtime is available, if not suggest using available SDK
          if ! (xcodebuild -showsdks 2>/dev/null | grep -q "iphoneos26"); then
            echo "Note: iOS 26.0 SDK may not be available - builds will use highest available iOS SDK"
            AVAILABLE_SDK=$(xcodebuild -showsdks 2>/dev/null | grep 'iphoneos' | tail -1 || echo "iOS SDK available")
            echo "Highest available iOS SDK: $AVAILABLE_SDK"
          fi

          echo "Ready for iOS development!"

      - name: Setup Development Environment
        env:
          FIREBASE_APP_CHECK_TOKEN: "mock_firebase_token_for_testing"
          TURNKEY_PUBLIC_ORGANIZATION_ID: "mock_turnkey_org_for_testing"
          TURNKEY_API_PUBLIC_KEY: "mock_turnkey_public_key_for_testing"
          TURNKEY_API_PRIVATE_KEY: "mock_turnkey_private_key_for_testing"
        run: |
          echo "Setting up development environment for testing"
          echo "Using mock values for required secrets"

          # Generate secrets using secure script
          ./Scripts/generate-secrets-secure.sh

          echo "Development environment configured securely"

      - name: Run Setup
        run: |
          echo "Running project setup..."
          make setup
          echo "Setup completed successfully"

      - name: Build for Testing
        run: |
          echo "Building for compilation validation..."
          echo "Scheme: Convos (Dev)"
          echo "Configuration: Dev"

          # Check available destinations
          echo "Available destinations:"
          (xcodebuild -project "${{ vars.XCODE_PROJECT }}" -scheme "Convos (Dev)" -showdestinations 2>&1 || true) | head -20

          # Use generic iOS device destination (no specific simulator required)
          echo "Destination: generic/platform=iOS"

          xcodebuild build \
            -project "${{ vars.XCODE_PROJECT }}" \
            -scheme "Convos (Dev)" \
            -destination "generic/platform=iOS" \
            -configuration Dev \
            -quiet \
            | xcbeautify

          echo "Build validation completed successfully"

  # Build and deploy job for releases
  build-and-deploy:
    # Only run on manual trigger (workflow_dispatch)
    if: github.event_name == 'workflow_dispatch'
    runs-on: macos-15
    timeout-minutes: 120
    environment: ${{ matrix.environment }}

    strategy:
      matrix:
        include:
          - environment: ${{ github.event.inputs.environment == 'prod' && 'convos-prod' || 'convos-dev' }}
            scheme: ${{ github.event.inputs.environment == 'prod' && 'Convos (Prod)' || 'Convos (Dev)' }}
            nse_scheme: ${{ github.event.inputs.environment == 'prod' && 'NotificationService (Prod)' || 'NotificationService (Dev)' }}
            appclip_scheme: "ConvosAppClip"
            configuration: ${{ github.event.inputs.environment == 'prod' && 'Release' || 'Dev' }}
            bundle_id: ${{ github.event.inputs.environment == 'prod' && 'org.convos.ios' || 'org.convos.ios-preview' }}
            build_config: ${{ github.event.inputs.environment == 'prod' && 'Prod' || 'Dev' }}
            input_env: ${{ github.event.inputs.environment }}

    steps:
      - name: Job Information
        run: |
          echo "Manual deployment triggered"
          echo "Selected environment: ${{ github.event.inputs.environment }}"
          echo "Building for: ${{ matrix.environment }}"
          echo "Bundle ID: ${{ matrix.bundle_id }}"
          echo "Scheme: ${{ matrix.scheme }}"
          echo "Build Configuration: ${{ matrix.configuration }} (matches ${{ matrix.build_config }}.xcconfig)"
          echo "Build Config: ${{ matrix.build_config }}"
          echo "Xcode version: $(xcodebuild -version | head -1)"
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Runner: ${{ runner.name }}"
          echo "GitHub Run Number: ${{ github.run_number }}"

      - name: Validate Manual Trigger
        run: |
          echo "Environment validation:"
          echo "- Selected: ${{ github.event.inputs.environment }}"
          echo "- Building for: ${{ matrix.environment }}"
          echo "- Bundle ID: ${{ matrix.bundle_id }}"
          echo "✅ Environment configuration confirmed"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SPM Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/*/SourcePackages
          key: spm-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-

      - name: Setup Ruby Environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Setup Xcode 26 RC
        run: |
          echo "Configuring Xcode 26 Release Candidate"
          sudo xcode-select -s /Applications/Xcode_26.0.app/Contents/Developer

          # Work around Xcode 26 RC pipe issue
          echo "Checking Xcode version..."
          (xcodebuild -version 2>&1 || true) > /tmp/xcode_version.txt
          if [ -f /tmp/xcode_version.txt ]; then
            echo "Xcode version: $(head -1 /tmp/xcode_version.txt | grep -o 'Xcode [0-9.]*' || echo 'Xcode 26.0')"
            echo "Build version: $(tail -1 /tmp/xcode_version.txt | grep -o 'Build version [A-Za-z0-9]*' || echo 'Build version available')"
          fi

          echo "Checking iOS SDK..."
          (xcodebuild -showsdks 2>&1 || true) | grep 'iOS ' | tail -1 || echo "iOS SDK: iOS 26.0 available"
          echo "Ready for iOS 26 development!"

      - name: Setup Development Environment
        env:
          FIREBASE_APP_CHECK_TOKEN: ${{ secrets.FIREBASE_APP_CHECK_TOKEN }}  # TODO: Remove after AppCheck/AppAttest merge
          TURNKEY_PUBLIC_ORGANIZATION_ID: ${{ secrets.TURNKEY_PUBLIC_ORGANIZATION_ID }}
          TURNKEY_API_PUBLIC_KEY: ${{ secrets.TURNKEY_API_PUBLIC_KEY }}
          TURNKEY_API_PRIVATE_KEY: ${{ secrets.TURNKEY_API_PRIVATE_KEY }}
        run: |
          echo "Setting up development environment for ${{ matrix.environment }}"

          # Generate secrets using secure script
          ./Scripts/generate-secrets-secure.sh

          echo "Development environment configured securely"

      - name: Run Setup
        run: |
          echo "Running project setup..."
          make setup
          echo "Setup completed successfully"

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Generating release notes..."

          # Run the release notes script (make it non-failing)
          if ./Scripts/read-release-notes.sh; then
            echo "Release notes generated successfully"
          else
            echo "Warning: Release notes script failed, using default notes"
            echo "RELEASE_NOTES=Automated build from commit ${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Calculate Build Number
        id: build_number
        run: |
          # Calculate build number using GitHub run number with offset
          # This ensures unique, incrementing build numbers
          # BASE_BUILD_NUMBER is defined as a Repository Variable for easy management
          CALCULATED_BUILD_NUMBER=$((${{ vars.BASE_BUILD_NUMBER }} + ${{ github.run_number }}))

          echo "Calculating build number for ${{ matrix.environment }}"
          echo "GitHub Run Number: ${{ github.run_number }}"
          echo "Base Build Number: ${{ vars.BASE_BUILD_NUMBER }}"
          echo "Calculated Build Number: $CALCULATED_BUILD_NUMBER"

          echo "BUILD_NUMBER=$CALCULATED_BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_number=$CALCULATED_BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Pre-Build Setup
        run: |
          echo "Fastlane will handle:"
          echo "✅ Build number setting: ${{ env.BUILD_NUMBER }}"
          echo "✅ Code signing with Match"
          echo "✅ Building all targets"
          echo "✅ Upload to TestFlight"
          echo ""
          echo "Target Bundle IDs:"
          echo "- Main App: ${{ matrix.bundle_id }}"
          echo "- NSE: ${{ matrix.bundle_id }}.ConvosNSE"
          echo "- App Clip: ${{ matrix.bundle_id }}.Clip"
          echo "Team ID: ${{ vars.DEVELOPER_TEAM_ID }}"

      - name: Build and Upload with Fastlane
        env:
          FASTLANE_APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          FASTLANE_APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          FASTLANE_APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
          APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
          DEVELOPER_TEAM_ID: ${{ vars.DEVELOPER_TEAM_ID }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          RELEASE_NOTES: ${{ env.RELEASE_NOTES }}
          MATCH_PASSWORD: ${{ secrets.FASTLANE_MATCH_PASSWORD }}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GITHUB_TOKEN }}
          CI: true
        run: |
          echo "Building and uploading with Fastlane"
          echo "Environment: ${{ matrix.input_env }}"
          echo "Bundle ID: ${{ matrix.bundle_id }}"
          echo "Build Number: ${{ env.BUILD_NUMBER }}"

          # Run appropriate Fastlane lane
          if [ "${{ matrix.input_env }}" = "prod" ]; then
            echo "Running production build..."
            bundle exec fastlane ios prod
          else
            echo "Running development build..."
            bundle exec fastlane ios dev
          fi

      - name: Upload Summary
        if: always()
        run: |
          echo "Build and Upload Summary"
          echo "======================="
          echo "Environment: ${{ matrix.input_env }}"
          echo "Bundle ID: ${{ matrix.bundle_id }}"
          echo "Build Number: ${{ env.BUILD_NUMBER }}"

          # Check if IPA was created
          if [ -f "./build/Convos-${{ matrix.input_env == 'prod' && 'Prod' || 'Dev' }}.ipa" ]; then
            IPA_SIZE=$(du -sh "./build/Convos-${{ matrix.input_env == 'prod' && 'Prod' || 'Dev' }}.ipa" | cut -f1)
            echo "✅ IPA Created: $IPA_SIZE"
            echo "✅ Uploaded to TestFlight successfully"
          else
            echo "❌ Build failed - check Fastlane output above"
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files"
          # Clean up build artifacts (Fastlane handles its own cleanup)
          echo "Cleanup completed"

      - name: Build Summary
        if: always()
        run: |
          echo "Build Summary for ${{ matrix.environment }}"
          echo "======================================"
          echo "Scheme: ${{ matrix.scheme }}"
          echo "Configuration: ${{ matrix.configuration }}"
          echo "Bundle ID: ${{ matrix.bundle_id }}"
          echo "Build Number: ${{ env.BUILD_NUMBER }}"
          echo "GitHub Run: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch/Tag: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo "Timestamp: $(date)"

          if [ "${{ job.status }}" == "success" ]; then
            echo "Status: SUCCESS"
          else
            echo "❌ Status: FAILED"
          fi
