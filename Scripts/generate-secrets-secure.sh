#!/usr/bin/env bash

set -e
set -o pipefail
# NO set -x to avoid exposing secrets in logs

SECRETS_FILE="Convos/Config/Secrets.swift"

echo "🔑 Generating $SECRETS_FILE from environment variables"

# Sensitive secrets (checked but not displayed)
SENSITIVE_SECRETS=(
    "POSTHOG_API_KEY"
    "FIREBASE_APP_CHECK_TOKEN"
    "SENTRY_UPLOAD_SYMBOLS_AUTH_TOKEN"
    "SLACK_URL_WITH_KEY"
    "SENTRY_DSN"
    "TURNKEY_PUBLIC_ORGANIZATION_ID"
    "TURNKEY_API_PUBLIC_KEY"
    "TURNKEY_API_PRIVATE_KEY"
)

# Environment variables (can be displayed)
ENV_VARS=(
    "CONVOS_API_BASE_URL"
    "XMTP_CUSTOM_HOST"
    "POSTHOG_HOST"
    "SENTRY_ORG"
    "SENTRY_PROJECT"
)

# Check that all secrets are present (but allow CONVOS_API_BASE_URL and XMTP_CUSTOM_HOST to be empty)
missing_secrets=()
for secret in "${SENSITIVE_SECRETS[@]}"; do
    if [[ -z "${!secret}" ]]; then
        missing_secrets+=("$secret")
    fi
done

# Check non-required ENV_VARS (excluding CONVOS_API_BASE_URL and XMTP_CUSTOM_HOST)
for secret in "POSTHOG_HOST" "API_RP_ID" "SENTRY_ORG" "SENTRY_PROJECT"; do
    if [[ -z "${!secret}" ]]; then
        missing_secrets+=("$secret")
    fi
done

if [[ ${#missing_secrets[@]} -gt 0 ]]; then
    echo "❌ Missing required environment variables:"
    printf '  - %s\n' "${missing_secrets[@]}"
    exit 1
fi

# Create directory if needed
mkdir -p "Config"

# Generate Secrets.swift WITHOUT exposing values in logs
cat >"$SECRETS_FILE" <<EOF
import Foundation

// WARNING:
// This code is generated by ./Scripts/generate-secrets-secure.sh.
// Do not edit this file directly. Your changes will be lost on next run.
// Git does not track this file.

// swiftlint:disable all

/// Secrets are generated from environment variables by ./Scripts/generate-secrets-secure.sh
enum Secrets {
    // API Keys and Tokens
    static let POSTHOG_API_KEY = #"${POSTHOG_API_KEY}"#
    static let FIREBASE_APP_CHECK_TOKEN = #"${FIREBASE_APP_CHECK_TOKEN}"#
    static let SENTRY_UPLOAD_SYMBOLS_AUTH_TOKEN = #"${SENTRY_UPLOAD_SYMBOLS_AUTH_TOKEN}"#
    static let SLACK_URL_WITH_KEY = #"${SLACK_URL_WITH_KEY}"#
    static let SENTRY_DSN = #"${SENTRY_DSN}"#
    static let TURNKEY_PUBLIC_ORGANIZATION_ID = #"${TURNKEY_PUBLIC_ORGANIZATION_ID}"#
    static let TURNKEY_API_PUBLIC_KEY = #"${TURNKEY_API_PUBLIC_KEY}"#
    static let TURNKEY_API_PRIVATE_KEY = #"${TURNKEY_API_PRIVATE_KEY}"#

    // Configuration URLs and IDs
    static let CONVOS_API_BASE_URL = #"${CONVOS_API_BASE_URL:-}"#
    static let XMTP_CUSTOM_HOST = #"${XMTP_CUSTOM_HOST:-}"#
    static let POSTHOG_HOST = #"${POSTHOG_HOST}"#
    static let API_RP_ID = #"${API_RP_ID}"#
    static let SENTRY_ORG = #"${SENTRY_ORG}"#
    static let SENTRY_PROJECT = #"${SENTRY_PROJECT}"#
}

// swiftlint:enable all
EOF

# Display only environment variables (not secrets)
echo "✅ Generated secrets with environment variables:"
for var in "${ENV_VARS[@]}"; do
    if [[ "$var" == "CONVOS_API_BASE_URL" || "$var" == "XMTP_CUSTOM_HOST" ]]; then
        if [[ -z "${!var}" ]]; then
            echo "  - $var: (empty - will use default)"
        else
            echo "  - $var: ${!var}"
        fi
    else
        echo "  - $var: ${!var}"
    fi
done

echo "  - ${#SENSITIVE_SECRETS[@]} sensitive secrets configured (not displayed)"

# Warn about empty values for optional configs
if [[ -z "$CONVOS_API_BASE_URL" ]]; then
    echo "⚠️  CONVOS_API_BASE_URL is empty - using default configuration"
fi

if [[ -z "$XMTP_CUSTOM_HOST" ]]; then
    echo "⚠️  XMTP_CUSTOM_HOST is empty - using default configuration"
fi

echo "🔐 Secrets.swift generated successfully"
