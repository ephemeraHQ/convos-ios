#!/usr/bin/env bash

# Exit on any error and ensure pipeline failures are caught
set -e
set -o pipefail

# This script generates the Secrets.swift file from a .env file
# Usage: ./generate-secrets.sh

# TODO: Allow switching between different environments

# The path to the Secrets.swift file
# Xcode knows about this file and expects it to exist.
# If you change this path, you need to reflect the change in the Xcode project.
SECRETS_FILE="Config/Secrets.swift"

echo "🔑 Generating $SECRETS_FILE"

# Check if .env file exists
if [ ! -f ".env" ]; then
  echo "Error: .env file not found"
  exit 1
fi

# Create the output directory if it doesn't exist
mkdir -p "Config"

# Read .env file and generate Secrets.swift
cat >"$SECRETS_FILE" <<'EOF'
import Foundation

// WARNING:
// This code is generated by ./Scripts/generate-secrets.sh.
// Do not edit this file directly. Your changes will be lost on next run.
// Git does not track this file.
// Instead, edit the .env file and run ./Scripts/generate-secrets.sh

// swiftlint:disable all

/// Secrets are generated from .env by ./Scripts/generate-secrets.sh
enum Secrets {
EOF

# Read each line from .env file, handles missing newline at EOF
while IFS='=' read -r key value || [[ -n "$key" ]]; do
  # Skip comments and empty lines
  [[ $key =~ ^#.*$ ]] && continue
  [[ -z $key ]] && continue

  # Remove any quotes from the value
  value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//')

  # Add the secret to the Swift file
  echo "    static let $key = \"$value\"" >>"$SECRETS_FILE"
done <.env

# Close the enum and add SwiftLint enable comment
cat >>"$SECRETS_FILE" <<'EOF'
}

// swiftlint:enable all
EOF

echo "🏁 Generated $SECRETS_FILE"
